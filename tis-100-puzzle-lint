#! /usr/bin/lua

-- ############################################################################
-- 
-- tis-100-puzzle-lint copyright 2015 Alan De Smet
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the "Software"),
-- to deal in the Software without restriction, including without limitation
-- the rights to use, copy, modify, merge, publish, distribute, sublicense,
-- and/or sell copies of the Software, and to permit persons to whom the
-- Software is furnished to do so, subject to the following conditions:
--  
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--  
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
-- FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
-- DEALINGS IN THE SOFTWARE. 
--
-- ############################################################################

-- The number at the end is so we can flag erroneously use of strings:
--    {"STREAM_IMAGE", "IN",0,input}
-- (These are before creation of the sandbox because we want them in both
--  our environment and the child's environment.)
STREAM_INPUT = "STREAM_INPUT_1234"
STREAM_OUTPUT = "STREAM_OUTPUT_1234"
STREAM_IMAGE = "STREAM_IMAGE_1234"
TILE_COMPUTE = "TILE_COMPUTE_1234"
TILE_MEMORY = "TILE_MEMORY_1234"
TILE_DAMAGED = "TILE_DAMAGED_1234"

-- Create a sandbox for the child to play in.  Need to be done first so none of 
-- our definitions are accidentally exposed to the child
local env = {}
for k,v in pairs(_G) do
	env[k] = v
end
env["env"] = nil


-- This is based on ran3 from Numerical Methods in C, Second Edition
-- It has been modified to roughly match the Lua math.random/math.randomseed
-- interface.

-- This is MAX_INT, and matches TIS-100's behavior
local MBIG = 2147483647
local MSEED = 161803398
local MZ = 0
local FAC = (1.0/MBIG)

local inext = 0
local inextp = 31
local ma = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

function math.randomseed(idum)
	local mj = math.abs(MSEED - math.abs(idum))
	
	mj = mj % MBIG
	ma[55] = mj
	local mk = 1
	local i
	for i=1,54 do
		local ii = (21*i)%55
		ma[ii] = mk
 		mk = mj - mk
 		if mk < MZ then mk = mk + MBIG end
 		mj = ma[ii]
	end

	local k
	for k=1,4 do
		for i=1,55 do
			ma[i] = ma[i] - ma[1+(i+30)%55]
			if ma[i] < MZ then ma[i] = ma[i] + MBIG end
		end
	end
	inext = 0
	inextp = 31
end

function math.random(mini, maxi)
	inext = inext+1
 	if inext == 56 then inext=1 end
	inextp = inextp+1
 	if inextp == 56 then inextp=1 end
 	local mj = ma[inext] - ma[inextp]
 	if mj < MZ then mj = mj + MBIG end
 	ma[inext] = mj
 	local f = mj * FAC;
	local range = 1+maxi-mini;
 	return math.floor((f * range) + mini);
end


-- ############################################################################


--------------------------------------------------------------------------------
error_count = 0
function report_error(description) 
	print("Error: "..description)
	error_count = error_count + 1
end

--------------------------------------------------------------------------------
function test_error(test, description)
	if not test then
		report_error(description)
	end
	return test
end



--------------------------------------------------------------------------------
function describe_var(v)
	if v == "nil" then
		return "nil"
	else
		return "the "..type(v).." \""..tostring(v).."\""
	end
end

--------------------------------------------------------------------------------
function word_wrap(max_len, paragraph)
	output = {}
	line = "";
	while string.len(paragraph) > 0 do
		space = string.find(paragraph, " ")
		if space ~= nil then
			len = string.len(line)
			if len > 0 then len = len + 1 end
			len = len + space - 1
			if len > max_len then
				if line ~= "" then
					table.insert(output, line)
					line = ""
				end
			end
			if string.len(line) > 0 then
				line = line .. " "
			end
			line = line .. string.sub(paragraph, 0, space - 1)
			paragraph = string.sub(paragraph, space + 1)

		else
			if line ~= "" then
				len = string.len(line)
				len = len + string.len(paragraph)
				if len > max_len then
					table.insert(output, line)
					table.insert(output, paragraph)
				else
					line = line.." "..paragraph
					table.insert(output, line)
				end
				line = ""
				paragraph = ""
			else
				table.insert(output, paragraph)
				paragraph = ""
			end
		end
	end
	return output
end

--------------------------------------------------------------------------------
function stream_type_display(stype)
	if(stype == STREAM_INPUT) then return "STREAM_INPUT" end
	if(stype == STREAM_OUTPUT) then return "STREAM_OUTPUT" end
	if(stype == STREAM_IMAGE) then return "STREAM_IMAGE" end
	return "Invalid ("..describe_var(stype)..")"
end

--------------------------------------------------------------------------------
function stream_type_display_brief(stype)
	if(stype == STREAM_INPUT) then return "INPUT" end
	if(stype == STREAM_OUTPUT) then return "OUTPUT" end
	if(stype == STREAM_IMAGE) then return "IMAGE" end
	return "Invald"
end

--------------------------------------------------------------------------------
function tile_display(tile)
	if tile == TILE_COMPUTE then return "TILE_COMPUTE" end
	if tile == TILE_MEMORY then return "TILE_MEMORY" end
	if tile == TILE_DAMAGED then return "TILE_DAMAGED" end
	return "Invalid ("..describe_var(tile)..")"
end

--------------------------------------------------------------------------------
function tile_display_brief(tile)
	if tile == TILE_COMPUTE then return "COMPUTE" end
	if tile == TILE_MEMORY then return "MEMORY" end
	if tile == TILE_DAMAGED then return "DAMAGED" end
	return "err"
end


function streamstring(s)
	if s == nil then return "" end
	if not is_int(s) then return "INVALD" end
	return tostring(s)
end

--------------------------------------------------------------------------------
function dump_puzzle(name, description, streams, layout)
	print(string.upper("    - "..tostring(name).." -"))

	print()

	if type(description) == "table" then
		for i,v in ipairs(description) do
			wrapped = word_wrap(33, v)
			for i2,v2 in ipairs(wrapped) do
				prefix = "       "
				if i2 == 1 then prefix = "     > " end
				v2 = string.sub(v2,0,33)
				print(prefix..v2)
			end
		end
	else
		print("Invalid Description")
	end

	print()

	if type(streams) == "table" then
		io.write("\n")

		io.write("    ");
		for i,v in ipairs(streams) do
			if type(v) == "table" then
				local fmt = "%6.6s "
				if v[1] == STREAM_OUTPUT then fmt = "%8.8s " end
				if v[1] == STREAM_IMAGE then fmt = "%30.30s " end
				io.write(string.format(fmt, stream_type_display_brief(v[1])))
			end
		end
		io.write("\n")

		io.write("    ");
		for i,v in ipairs(streams) do
			if type(v) == "table" then
				local fmt = "%6.6s "
				if v[1] == STREAM_OUTPUT then fmt = "%8.8s " end
				if v[1] == STREAM_IMAGE then fmt = "%30.30s " end
				io.write(string.format(fmt, "Port "..v[3]))
			end
		end
		io.write("\n")

		io.write("    ");
		for i,v in ipairs(streams) do
			if type(v) == "table" then
				local fmt = "%6.6s "
				if v[1] == STREAM_OUTPUT then fmt = "%8.8s " end
				if v[1] == STREAM_IMAGE then fmt = "%30.30s " end
				io.write(string.format(fmt, tostring(v[2])))
			end
		end
		io.write("\n")
	end

	-- TODO: Only really works with one image.
	-- Which is sort of fine, you only get one. But
	-- need to do something if there are more than one.
	local img_idx = 1
	for i=1,39 do
		if type(streams) == "table" then
			io.write(string.format("%2d. ",i))
			for k,v in ipairs(streams) do
				if type(v) == "table" then
					local fmt = "%6s "
					if v[1] == STREAM_OUTPUT then fmt = "%8s " end
					if v[1] == STREAM_IMAGE then
						if i > 18 then
							io.write("                              ");
						else
							for dmy=1,30 do
								if v[4][img_idx] == 0 then io.write(" ") 
								elseif v[4][img_idx] == 1 then io.write("░") 
								elseif v[4][img_idx] == 2 then io.write("▒") 
								elseif v[4][img_idx] == 3 then io.write("█") 
								elseif v[4][img_idx] == 4 then io.write("╬") 
								else io.write("?") end
								img_idx = img_idx + 1
							end
						end
						io.write(" ")

					else
						local data = v[4]
						io.write(string.format(fmt, streamstring(data[i])))
					end
				end
			end
		end
		io.write("\n")
	end

	print()

	if type(layout) == "table" then
		local fmt = "    %-8s %-8s %-8s %-8s\n"
		-- TODO: Print appropriate inputs here
		io.write(string.format(fmt,
				tile_display_brief(layout[1]),
				tile_display_brief(layout[2]),
				tile_display_brief(layout[3]),
				tile_display_brief(layout[4])))

		io.write(string.format(fmt,
				tile_display_brief(layout[5]),
				tile_display_brief(layout[6]),
				tile_display_brief(layout[7]),
				tile_display_brief(layout[8])))

		io.write(string.format(fmt,
				tile_display_brief(layout[9]),
				tile_display_brief(layout[10]),
				tile_display_brief(layout[11]),
				tile_display_brief(layout[12])))
		-- TODO: Print appropriate outputs here

	else
		print("Invalid Layout")
	end

end

-------------------------------------------------------------------------------
function validate_name(name)
	if not test_error(type(name) == "string", "get_name returned a "..type(name).." instead of a single string.") then
		return
	end
	MAX_NAME_LEN = 33
	test_error(string.len(name) <= MAX_NAME_LEN, "get_name returned \""..name.."\" which is "..string.len(name).." chracters long ; only "..MAX_NAME_LEN.." fit in the title.")
end


--------------------------------------------------------------------------------
function concatenate_array(t1, t2)
	out = {}
	for k,v in ipairs(t1) do
		table.insert(out, v)
	end
	for k,v in ipairs(t2) do
		table.insert(out, v)
	end
	return out
end


-------------------------------------------------------------------------------
function validate_description(description)
	local layout = {}
	if test_error(type(description) == "table", "get_description returned a "..type(name).." instead of a table (list) of strings.") then
		for i,v in ipairs(description) do
			test_error(type(v) == "string", "Element "..i.." returned from get_description is a "..type(v).." instead of a single string.")

			if type(v) == "string" then
				new_layout = word_wrap(33, v)
				layout = concatenate_array(layout, new_layout)
			end
		end
		-- TODO: Test for non-integer keys in tables with pairs
	end

	show_desc = false
	if #layout > 6 then
		report_error("Description needs "..#layout.." lines, but is limited to 6. Excess lines will be discarded.")
		show_desc = true
	end
	for k,v in ipairs(layout) do
		if string.len(v) > 33 then
			report_error('"'..v.."\" will be truncated to 33 characters")
			show_desc = true
		end
	end

	if show_desc then
		print("   +---------------------------------")
		for k,v in ipairs(layout) do
			print(string.format("   |%-33s|", v))
		end
		print("   +---------------------------------")
	end
-- Test too long words (33 characters)
-- Todo: test rendered length. (33 x 6)
--    Long words are truncated at 33
--    Lines beyond 6 are discarded
-- > DRAW RED IF PIXEL ABOVE OR TO THE
--   LEFT IS A DIFFERENT COLOR
end

--------------------------------------------------------------------------------
function is_int(i)
	return type(i) == "number" and math.floor(i) == i
end

--------------------------------------------------------------------------------
function validate_stream(index, stream)
	if not type(stream) == "table" then
		return {"Stream "..index.." returned from get_streams is a "..type(stream).." instead of a table."}
	end

	if #stream ~= 4 then
		return {"Stream "..index.." returned from get_streams has "..#stream.." entries, but should have exactly 4"}
	end

	local stype = stream[1]
	local sname = stream[2]
	local position = stream[3]
	local data = stream[4]

	local errors = {}

	if stype ~= STREAM_INPUT and stype ~= STREAM_OUTPUT and stype ~= STREAM_IMAGE then
		table.insert(errors, "First field for stream "..index.." is "..describe_var(stype)..". Only STREAM_INPUT, STREAM_OUTPUT, or STREAM_IMAGE are accepted.")
	end

	if type(sname) == "string" then

		if stype == STREAM_INPUT or stype == STREAM_OUTPUT then
			max_len = 0
			if stype == STREAM_INPUT then
				max_len = 6
			elseif stype == STREAM_OUTPUT then
				max_len = 8
			end
			if string.len(sname) > max_len then
				table.insert(errors, "Stream "..index.."'s name of \""..sname.."\" is "..string.len(sname).." characters long. It should be "..max_len.." or less to avoid overlaps.")
			end
			if string.len(sname) == 0 then
				table.insert(errors, "Stream "..index.."'s has an empty name.")
			end
		elseif stype == STREAM_IMAGE then
			if sname ~= "IMAGE" then
				table.insert(errors, "Stream "..index.." is an image. The name isn't used.  It is recommended to use IMAGE as a reminder.")
			end
		end

	else
		table.insert(errors, "Stream "..index.."'s name is a "..type(sname).." but should be a single string.")
	end

	if (not is_int(position)) or position < 0 or position > 3 then
		table.insert(errors, "The position for stream "..index.."'s name is "..describe_var(position)..". It must be an integer from 0 through 3 inclusive.")
	end

	if type(data) == "table" then
		-- TODO Check for non integer indices
		-- TODO Need to special case look for nil values; a nil
		--    value causes ipairs to bail out.

		local max_int = 999
		local min_int = -999
		if stype == STREAM_IMAGE then
			max_int = 4
			min_int = 0
		end

		local range_reports = 0
		local max_range_reports = 4
		for i,v in ipairs(data) do
			if (not is_int(v)) or v < min_int or v > max_int then
				if range_reports < max_range_reports then
					table.insert(errors, "Stream "..index.."'s data entry "..i.." is "..describe_var(v)..".  It must be an integer from "..min_int.." through "..max_int..".")
					range_reports = range_reports + 1
					if range_reports == max_range_reports then
						table.insert(errors, "(Further out of range errors for stream "..i.." will be skipped)")
					end
				end
			end
		end

		if stype == STREAM_INPUT or stype == STREAM_OUTPUT then
			if #data < 1 then
				table.insert(errors, "Stream "..index..", "..tostring(sname)..", has no data points, but should have at least 1.")
			end
			if #data > 39 then
				table.insert(errors, "Stream "..index..", "..tostring(sname)..", has "..#data.." data points, but should have no more than 39.")
			end
		elseif stype == STREAM_IMAGE then
			if #data ~= (18*30) then
				table.insert(errors, "The image stream "..index..", "..tostring(sname)..", has "..#data.." data points, but should have exactly "..(18*30).." (18*30).")
			end
		end

	else
		-- TODO This code won't fire if the fourth field is nil. It should
		table.insert(errors, "The fourth field for stream "..index.." is "..describe_var(data)..", but must be a table of integers.")
	end


	return errors
end

--------------------------------------------------------------------------------
function stream_width(stype)
	if stype == STREAM_INPUT then return 6+1 end
	if stype == STREAM_OUTPUT then return 8+1 end
	if stype == STREAM_IMAGE then return 33+1 end
	return 0
end

--------------------------------------------------------------------------------
function validate_streams(streams)
	if type(streams) ~= "table" then
		report_error("get_streams returned a "..type(streams).." instead of a table of tables.")
		return
	end

	used_names = {}
	used_inputs = {}
	used_outputs = {}

	local cumulative_width = 0
	local maximum_width = 41

	for i,v in ipairs(streams) do
		errors = validate_stream(i,v)

		sname = v[2]
		if type(sname) == "string" then
			if used_names[sname] ~= nil then
				table.insert(errors, "The stream name \""..sname.."\" was used for streams "..used_names[sname].." and "..i..". A name should be used only once.")
			end
			used_names[sname] = i
		end

		stype = v[1]
		cumulative_width = cumulative_width + stream_width(stype)

		if cumulative_width > maximum_width then
			table.insert(errors, "Stream "..i.." ("..tostring(sname)..") is likely to overlap the nodes.")
		end

		position = v[3]
		if type(stype) == "string" and type(position) == "number" then
			if stype == STREAM_INPUT then
				if used_inputs[position] ~= nil then
					table.insert(errors, "The input position "..position.." was used for both streams "..used_inputs[position].." and "..i..". An input position should only be used once.")
				end
				used_inputs[position] = i
			elseif stype == STREAM_OUTPUT or stype == STREAM_IMAGE then
				if used_outputs[position] ~= nil then
					table.insert(errors, "The output position "..position.." was used for both streams "..used_outputs[position].." and "..i..". An output position should only be used once.")
				end
				used_outputs[position] = i
			else
			end
		end

		for i,v in ipairs(errors) do
			report_error(v)
		end
	end
	-- TODO: Test for non-integer keys in tables with pairs
end

--------------------------------------------------------------------------------
function validate_layout(layout)
	if #layout ~= 12 then
		report_error("get_layout returned "..#layout.." entries. It must return exactly 12 entries in an implied 3x4 arrangement.")
		return
	end
end

function usage(name)
	print(
"Usage:\n"..
name..[[ [options] INPUT.lua

INPUT.lua is the TIS-100 Lua puzzle to be analyzed.

Options:
  -h, --help    - Display this text and abort
  -p, --preview - Preview what the puzzle will look like in TIS-100
]])
	os.exit(1)
end

--------------------------------------------------------------------------------
function main(arg)

	local file
	local want_preview = false

	local idx = 1
	while idx <= #arg do
		thisarg = arg[idx]
		idx = idx + 1

		if thisarg == "-h" or thisarg == "--help" or thisarg == "-help" then
			usage(arg[0])

		elseif thisarg == "-p" or thisarg == "--preview" or thisarg == "-preview" then
			want_preview = true
			print("want preview")

		elseif file ~= nil then
			print("Unexpected argument "..thisarg..". Only one Lua puzzle file should be specified.")
			return 1
		else
			file = thisarg
		end
	end

	if file == nil then usage(arg[0]) end


	local start,fend,capture = string.find(file, "([0-9]+)")
	if capture ~= nil then
 		math.randomseed(tonumber(capture))
 	end

	loadpuzzle,reason = loadfile(file,"tb",env);
	if loadpuzzle == nil then
		print("Error: Unable to parse "..file..": "..reason);
		return 1
	end

	status,reason = pcall(loadpuzzle)
	if not status then
		print("Error: Unable to run "..file..": "..reason)
		return 1
	end



	local name
	if env.get_name ~= nil then
		name = env.get_name()
	else
		name = "ERROR NOT IMPLEMENTED"
		report_error("get_name() is not implemented")
	end

	local description
	if env.get_description ~= nil then
		description = env.get_description()
	else
		description = {"ERROR NOT IMPLEMENTED"}
		report_error("get_description() is not implemented")
	end

	local streams
	if env.get_streams ~= nil then
		streams = env.get_streams()
	else
		streams = {}
		report_error("get_streams() is not implemented")
	end

	local layout
	if env.get_layout ~= nil then
		layout = env.get_layout()
	else
		layout = {}
		report_error("get_layout() is not implemented")
	end

	if want_preview then
		dump_puzzle(name, description, streams, layout)
	end

	validate_name(name)
	validate_description(description)
	validate_streams(streams)
	validate_layout(layout)

	if error_count == 1 then
		print("1 error detected")
	elseif error_count == 0 then
		print("No errors detected")
	else
		print(error_count.." errors detected")
	end

	if error_count > 0 then
		return 2
	end
end

function tww(len, text)
	print("-----------------")
	print(text)
	lines = word_wrap(len, text)
	for i,v in ipairs(lines) do
		print(v)
	end
end


os.exit(main(arg))
